function getPatternSize(t){let e=0,i=0;for(const[s,n]of t)s>e&&(e=s),n>i&&(i=n);return{rows:e+1,cols:i+1}}const patterns={Block:[[0,0],[0,1],[1,0],[1,1]],Beehive:[[0,1],[0,2],[1,0],[1,3],[2,1],[2,2]],Loaf:[[0,1],[0,2],[1,0],[1,3],[2,1],[2,3],[3,2]],Boat:[[0,0],[0,1],[1,0],[1,2],[2,1]],Tub:[[0,1],[1,0],[1,2],[2,1]],Blinker:[[1,0],[1,1],[1,2]],Toad:[[1,1],[1,2],[1,3],[2,0],[2,1],[2,2]],Beacon:[[0,0],[0,1],[1,0],[1,1],[2,2],[2,3],[3,2],[3,3]],Pulsar:[[2,4],[2,5],[2,6],[2,10],[2,11],[2,12],[4,2],[5,2],[6,2],[4,7],[5,7],[6,7],[4,9],[5,9],[6,9],[4,14],[5,14],[6,14],[7,4],[7,5],[7,6],[7,10],[7,11],[7,12],[9,4],[9,5],[9,6],[9,10],[9,11],[9,12],[10,2],[11,2],[12,2],[10,7],[11,7],[12,7],[10,9],[11,9],[12,9],[10,14],[11,14],[12,14],[14,4],[14,5],[14,6],[14,10],[14,11],[14,12]],Pentadecathlon:[[0,1],[1,1],[2,0],[2,2],[3,1],[4,1],[5,1],[6,1],[7,0],[7,2],[8,1],[9,1]],Glider:[[0,1],[1,2],[2,0],[2,1],[2,2]],LWSS:[[0,1],[0,4],[1,0],[2,0],[2,4],[3,0],[3,1],[3,2],[3,3]],MWSS:[[0,1],[0,2],[0,3],[0,4],[1,0],[2,0],[3,0],[3,4],[4,1],[4,4]],HWSS:[[0,1],[0,2],[0,3],[0,4],[0,5],[1,0],[2,0],[3,0],[3,5],[4,1],[4,5]],"R-pentomino":[[0,1],[0,2],[1,0],[1,1],[2,1]],Diehard:[[0,6],[1,0],[1,1],[2,1],[2,5],[2,6],[2,7]],Acorn:[[0,1],[1,3],[2,0],[2,1],[2,4],[2,5],[2,6]],Eureka:[[0,1],[1,1],[1,2],[2,2],[3,2],[3,3],[4,3],[5,3],[5,4],[6,4],[6,5],[7,5],[7,6]],"Gosper Glider Gun":[[5,1],[5,2],[6,1],[6,2],[5,11],[6,11],[7,11],[4,12],[8,12],[3,13],[9,13],[3,14],[9,14],[6,15],[4,16],[8,16],[5,17],[6,17],[7,17],[6,18],[3,21],[4,21],[5,21],[3,22],[4,22],[5,22],[2,23],[6,23],[1,25],[2,25],[6,25],[7,25],[3,35],[4,35],[3,36],[4,36]]};class Conway{constructor(t=40,e=40,i="Dirichlet"){this.height=t,this.width=e,this.boundary=i,this.grid=this.createEmptyGrid()}createEmptyGrid(){return Array.from({length:this.height},()=>Array(this.width).fill(0))}getLiveNeighborCount(t,e){let i=0;const s=[[-1,-1],[-1,0],[-1,1],[0,-1],[0,1],[1,-1],[1,0],[1,1]];for(const[n,o]of s){const s=t+n,a=e+o;if(s>=0&&s<this.height&&a>=0&&a<this.width&&"Dirichlet"===this.boundary)i+=this.grid[s][a];else if("periodic"===this.boundary){const t=(s+this.height)%this.height,e=(a+this.width)%this.width;i+=this.grid[t][e]}}return i}step(){const t=this.createEmptyGrid();for(let e=0;e<this.height;e++)for(let i=0;i<this.width;i++){const s=1===this.grid[e][i],n=this.getLiveNeighborCount(e,i);t[e][i]=(!s||2!==n&&3!==n)&&(s||3!==n)?0:1}return this.grid=t,!0}reset(){this.grid=this.createEmptyGrid()}}class Renderer{constructor(t,e){this.canvas=t,this.ctx=t.getContext("2d"),this.automaton=e,this.hoverCell=null,this.animationFrameId=null,this.glowAlpha=.3,this.glowIncreasing=!0,this.onResize(),window.addEventListener("resize",()=>this.onResize()),t.addEventListener("mousemove",t=>this.handleHover(t)),t.addEventListener("mouseleave",()=>this.handleMouseLeave())}onResize(){this.canvas.width=1200,this.canvas.height=1200,this.cellW=this.canvas.width/this.automaton.width,this.cellH=this.canvas.height/this.automaton.height,this.render()}handleHover(t){const e=this.canvas.getBoundingClientRect(),i=t.clientX-e.left,s=t.clientY-e.top,n=this.getCell(i,s);this.hoverCell&&n.row===this.hoverCell.row&&n.col===this.hoverCell.col||(this.hoverCell=n,this.startAnimation())}handleMouseLeave(){this.hoverCell=null,this.stopAnimation(),this.render()}getCell(t,e){return{row:Math.floor(e/this.cellH),col:Math.floor(t/this.cellW)}}startAnimation(){null===this.animationFrameId&&this.animationLoop()}stopAnimation(){null!==this.animationFrameId&&(cancelAnimationFrame(this.animationFrameId),this.animationFrameId=null)}animationLoop(){this.glowIncreasing?(this.glowAlpha+=.01,this.glowAlpha>=.8&&(this.glowIncreasing=!1)):(this.glowAlpha-=.01,this.glowAlpha<=.4&&(this.glowIncreasing=!0)),this.render(),this.animationFrameId=requestAnimationFrame(()=>this.animationLoop())}render(){const t=this.ctx,{cellW:e,cellH:i}=this;t.fillStyle="rgb(20,20,20)",t.fillRect(0,0,this.canvas.width,this.canvas.height),t.strokeStyle="#333",t.lineWidth=1;for(let i=0;i<this.automaton.width;i++)t.beginPath(),t.moveTo(i*e,0),t.lineTo(i*e,this.canvas.height),t.stroke();for(let e=0;e<this.automaton.height;e++)t.beginPath(),t.moveTo(0,e*i),t.lineTo(this.canvas.width,e*i),t.stroke();t.fillStyle="white";for(let s=0;s<this.automaton.height;s++)for(let n=0;n<this.automaton.width;n++)1===this.automaton.grid[s][n]&&t.fillRect(n*e,s*i,e,i);if(this.hoverCell){const{row:s,col:n}=this.hoverCell;t.strokeStyle=`rgba(255,255,255,${this.glowAlpha.toFixed(2)})`,t.lineWidth=3,t.shadowColor=`rgba(255,255,255,${(this.glowAlpha/2).toFixed(2)})`,t.shadowBlur=8,t.strokeRect(n*e+1.5,s*i+1.5,e-3,i-3),t.shadowBlur=0}}}class Controller{constructor(t,e,i,s){this.canvas=t,this.automaton=e,this.renderer=i,this.interval=null,this.delay=s,this.isRunning=!1,this.isPaused=!1,t.addEventListener("click",s=>{const n=t.getBoundingClientRect(),o=s.clientX-n.left,a=s.clientY-n.top,{row:r,col:h}=i.getCell(o,a);e.grid[r][h]=e.grid[r][h]?0:1,i.render()})}start(){this.isRunning&&!this.isPaused||(this.isRunning=!0,this.isPaused=!1,this.interval=setInterval(()=>{const t=this.automaton.step();this.renderer.render(),t||this.stop()},this.delay))}pause(){this.interval&&(clearInterval(this.interval),this.interval=null,this.isPaused=!0)}stop(){this.isRunning=!1,this.isPaused=!1,this.interval&&(clearInterval(this.interval),this.interval=null)}reset(){this.stop(),this.automaton.reset(),this.renderer.render()}toggle(){this.isRunning?this.isPaused?this.start():this.pause():this.start()}}const canvas=document.getElementById("caCanvas"),startBtn=document.getElementById("startBtn"),resetBtn=document.getElementById("resetBtn"),spaceHeight=40,spaceWidth=40,delay=100,automaton=new Conway(spaceHeight,spaceWidth),renderer=new Renderer(canvas,automaton),controller=new Controller(canvas,automaton,renderer,delay);renderer.render(),startBtn.addEventListener("click",()=>{controller.toggle(),controller.isRunning&&!controller.isPaused?startBtn.classList.add("paused"):startBtn.classList.remove("paused")}),resetBtn.onclick=()=>{controller.reset(),startBtn.classList.remove("paused")};const boundarySelect=document.getElementById("boundarySelect");boundarySelect.addEventListener("change",t=>{automaton.boundary=t.target.value}),document.getElementById("loadPatternBtn").addEventListener("click",()=>{const t=document.getElementById("patternSelect").value,e=patterns[t];if(!e)return;automaton.reset();const i=Math.floor((automaton.height-getPatternSize(e).rows)/2),s=Math.floor((automaton.width-getPatternSize(e).cols)/2);for(const[t,n]of e){const e=t+i,o=n+s;e>=0&&e<automaton.height&&o>=0&&o<automaton.width&&(automaton.grid[e][o]=1)}renderer.render()});